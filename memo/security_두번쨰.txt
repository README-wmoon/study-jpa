요청
왼쪽(그림)위에 보면 필터체인을 통해 dispatcherServerlet(아래)으로 이동한다
FilterChainProxy서버는 자체적으로 생기지만 오른쪽그림에서 개발자가 옵션을 코딩하여 설정을 넣어줄 수 있다

SecurityContextPersistenceFilter
이전에 로그인(인증)이 이미 되었다면 SecurityContextHolder 안에 Authentication쪽에 정보(sessionId)가 담겨있다.
만약에 로그인이 되었다면 아래쪽들을 거치지 않고 바로 controller로 가지만 Authentication에 sessionId가 없으면 이제는 점점 밑에서 필터를 걸어주어야된다.

LogoutFilter
Logout이 되면 controller로 넘어간다

*** UsernamePasswordAuthenticationFilter
인증하는 필터 -> 사용자가 입력한 아이디와 비밀번호 이 두가지를 오른쪽에 UsernamePasswordAuthenticationToken을 생성해 
AuthenticationManger를 통해 실제 인증이 성공하면 ProvideManager거쳐서 그 회원을 정보(맨 오른쪽 그림들)를 가져오라는 뜻이다.
정보를 가져오면 Controller를 통해 MyPage 회원정보를 뿌릴수 있다

------------------------------------------------------------------------------------------------------------
***SecurityContextHolder
SecurityContextHolder는 인증과 인가정보를 보유하며 SecurityContext인스턴스를 스레드 로컬 변수에 저장한다.
다중 스레드 환경인 스프링에서 시큐리티를 이용하면
시큐리티는 인증, 인가정보를 스레드에 안전하도록 관리하게 된다.

SecurityContext는 요청 또는 세션의 수명 동안 사용자의 정보를 저장하고 액세스하는 방법을 제공하고 
실행중인 스레드와 연결되므로 애플리케이션의 어느부분에서도 쉽게 엑세스가 가능하다.
SecurityContext는 유저오브젝트 / 권한 / 패스워드등의 정보를 가진 Authentication를 보유하는데 시큐리티는 요청을 필터에서 확인해 
Authentication객체를 생성하고 SecurityContext에 저장한다.
시큐리티는 인증과 권한을 처리하기 위해서 이러한 패턴(프로토콜)을 이용해서 가져야할 타입(Authentication)을 강제시킨다.
이후 요청이 완료되면 SecurityContext을 삭제하여 보안을 강화한다.
Authentication객체에는 다음과 같은 객체가 들어간다.

- Pricipal 객체
인증된 사용자를 나타내는 객체를 의미한다.
UserDetailsService에서 반환된 UserDetails객체가 Pricipal객체가 된다.
주로 사용자의 아이디나 이메일이 들어간다.

- Credentials 객체
인증을 위해 사용되는 자격 증명 정보를 나타내는 객체를 의미한다.
보통 패스워드나 액세스 토큰등이 Credentials객체가 된다.

- Authorities 객체
인증된 사용자의 권한 정보를 나타내는 객체를 의미한다.
보통 권한 문자열 또는 권한 객체의 컬렉션이 Authorities객체로 사용된다.
UserDetails객체가 반환될 때 권한 정보를 GrantedAuthority 컬렉션으로 반환하면 이 객체가 Authorities객체가 된다.